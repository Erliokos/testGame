{"version":3,"sources":["assets/scripts/Timer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAmC,yBAAY;IAA/C;QAAA,qEA+CC;QA7CG,cAAQ,GAAW,CAAC,CAAA;QAEpB,UAAI,GAAW,CAAC,CAAA;QAEhB,YAAM,GAAY,KAAK,CAAA;QAEf,cAAQ,GAAe,cAAO,CAAC,CAAC;QAEhC,YAAM,GAAW,CAAC,CAAA;QAElB,oBAAc,GAAmB,IAAI,CAAA;;IAmCjD,CAAC;IAjCG,qBAAK,GAAL;QACI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAA;QAC9D,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACjD,CAAC;IAED,yBAAS,GAAT,UAAU,OAAe,EAAE,QAAsB,EAAE,IAAY;QAC3D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;IACtB,CAAC;IAED,uBAAO,GAAP,UAAQ,IAAY;QAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;IACxC,CAAC;IAED,sBAAM,GAAN,UAAQ,EAAU;QACd,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAM;QACxB,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAClB,IAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;YACf,IAAI,CAAC,KAAK,EAAE,CAAA;SACf;IACL,CAAC;IAED,qBAAK,GAAL;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAA;QACzC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAC7C,IAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAC;YACjB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;YACnB,IAAI,CAAC,QAAQ,EAAE,CAAA;SAClB;IACL,CAAC;IA9CgB,KAAK;QADzB,OAAO;OACa,KAAK,CA+CzB;IAAD,YAAC;CA/CD,AA+CC,CA/CkC,EAAE,CAAC,SAAS,GA+C9C;kBA/CoB,KAAK","file":"","sourceRoot":"/","sourcesContent":["import TimerScoreView from \"./TimerScoreView\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Timer extends cc.Component {\n\n    allTimes: number = 0\n\n    step: number = 1\n\n    isWork: boolean = false\n\n    private onTimeUp: () => void = () => {};\n\n    private second: number = 0\n\n    private timerScoreView: TimerScoreView = null\n\n    start(){\n        this.timerScoreView = this.node.getComponent('TimerScoreView')\n        this.timerScoreView.renderTime(this.allTimes)\n    }\n\n    initTimer(allTime: number, onTimeUp: VoidFunction, step: number){\n        this.onTimeUp = onTimeUp\n        this.allTimes = allTime\n        this.step = step\n        this.isWork = true\n    }\n\n    addTime(time: number) {\n        this.allTimes = this.allTimes + time\n    }\n\n    update (dt: number) {\n        if (!this.isWork) return\n        this.second += dt;\n        if(this.second > 1) {\n            this.second = 0\n            this.round()\n        }\n    }\n\n    round(){\n        this.allTimes = this.allTimes - this.step\n        this.timerScoreView.renderTime(this.allTimes)\n        if(this.allTimes < 1){\n            this.isWork = false\n            this.onTimeUp()\n        }\n    }\n}\n"]}