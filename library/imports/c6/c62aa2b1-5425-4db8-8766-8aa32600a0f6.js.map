{"version":3,"sources":["assets/scripts/utils/searchLineVertical.ts"],"names":[],"mappings":";;;;;;;AAAA,8CAAyC;AAElC,IAAM,kBAAkB,GAAG,UAAC,GAAY,EAAE,aAAwB,EAAE,KAAmC,EAAE,SAAyB;IACvI,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,gBAAM,CAAC,WAAW,IAAI,GAAG,CAAC,CAAC,IAAI,gBAAM,CAAC,YAAY;QAAE,OAAO;IAClG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IACvC,IAAG,SAAS,KAAK,IAAI,EAAC;QACpB,0BAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;QACvE,OAAO,aAAa,CAAA;KACrB;IACD,IAAG,SAAS,KAAK,MAAM,EAAE;QACvB,0BAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;QACzE,OAAO,aAAa,CAAA;KACrB;IACD,0BAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;IACvE,0BAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;IACzE,OAAO,aAAa,CAAA;AACtB,CAAC,CAAA;AAdY,QAAA,kBAAkB,sBAc9B;AAEM,IAAM,eAAe,GAAG,UAAC,GAAY,EAAE,aAAwB,EAAE,KAAmC,EAAE,UAAkB;IAC7H,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;IAC3B,IAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAE/B,KAAK,IAAI,EAAE,GAAG,CAAC,UAAU,EAAE,EAAE,IAAI,UAAU,EAAE,EAAE,EAAE,EAAE;QACjD,KAAK,IAAI,EAAE,GAAG,CAAC,UAAU,EAAE,EAAE,IAAI,UAAU,EAAE,EAAE,EAAE,EAAE;YACjD,IAAM,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YACrB,IAAM,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YAErB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE;gBAC/C,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACzC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAC1B;aACF;SACF;KACF;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAA;AAnBY,QAAA,eAAe,mBAmB3B","file":"","sourceRoot":"/","sourcesContent":["import config from \"../constants/config\";\n\nexport const searchLineVertical = (pos: cc.Vec2, groupToRemove: cc.Node[], board: Array<Array<cc.Node | null>>, direction?: 'up' | 'down') => {\n  if (pos.x < 0 || pos.y < 0 || pos.x >= config.BOARD_WIDTH || pos.y >= config.BOARD_HEIGHT) return;\n  groupToRemove.push(board[pos.x][pos.y])\n  if(direction === 'up'){\n    searchLineVertical(cc.v2(pos.x, pos.y + 1), groupToRemove, board, 'up')\n    return groupToRemove\n  }\n  if(direction === 'down') {\n    searchLineVertical(cc.v2(pos.x, pos.y - 1), groupToRemove, board, 'down')\n    return groupToRemove\n  }\n  searchLineVertical(cc.v2(pos.x, pos.y + 1), groupToRemove, board, 'up')\n  searchLineVertical(cc.v2(pos.x, pos.y - 1), groupToRemove, board, 'down')\n  return groupToRemove\n}\n\nexport const searchBombField = (pos: cc.Vec2, groupToRemove: cc.Node[], board: Array<Array<cc.Node | null>>, bombRadius: number) => {\n  const width = board.length;\n  const height = board[0].length;\n\n  for (let dx = -bombRadius; dx <= bombRadius; dx++) {\n    for (let dy = -bombRadius; dy <= bombRadius; dy++) {\n      const x = pos.x + dx;\n      const y = pos.y + dy;\n\n      if (x >= 0 && x < width && y >= 0 && y < height) {\n        const node = board[x][y];\n        if (node && !groupToRemove.includes(node)) {\n          groupToRemove.push(node);\n        }\n      }\n    }\n  }\n\n  return groupToRemove;\n}\n"]}